<svg xmlns="http://www.w3.org/2000/svg" width="183.515" height="35.6" viewBox="0 0 183.515 35.6"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
    //&lt;![CDATA[
    const WAIT_TIME = 100;
    const hookedObj = {
      getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
      watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
      fakeGeo: true,
      genLat: 38.883333,
      genLon: -77.000
    };
  
    function waitGetCurrentPosition() {
      if ((typeof hookedObj.fakeGeo !== 'undefined')) {
        if (hookedObj.fakeGeo === true) {
          hookedObj.tmp_successCallback({
            coords: {
              latitude: hookedObj.genLat,
              longitude: hookedObj.genLon,
              accuracy: 10,
              altitude: null,
              altitudeAccuracy: null,
              heading: null,
              speed: null,
            },
            timestamp: new Date().getTime(),
          });
        } else {
          hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
        }
      } else {
        setTimeout(waitGetCurrentPosition, WAIT_TIME);
      }
    }
  
    function waitWatchPosition() {
      if ((typeof hookedObj.fakeGeo !== 'undefined')) {
        if (hookedObj.fakeGeo === true) {
          navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
          return Math.floor(Math.random() * 10000); // random id
        } else {
          hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        }
      } else {
        setTimeout(waitWatchPosition, WAIT_TIME);
      }
    }
  
    Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
      hookedObj.tmp_successCallback = successCallback;
      hookedObj.tmp_errorCallback = errorCallback;
      hookedObj.tmp_options = options;
      waitGetCurrentPosition();
    };
    Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
      hookedObj.tmp2_successCallback = successCallback;
      hookedObj.tmp2_errorCallback = errorCallback;
      hookedObj.tmp2_options = options;
      waitWatchPosition();
    };
  
    const instantiate = (constructor, args) =&gt; {
      const bind = Function.bind;
      const unbind = bind.bind(bind);
      return new (unbind(constructor, null).apply(null, args));
    }
  
    Blob = function (_Blob) {
      function secureBlob(...args) {
        const injectableMimeTypes = [
          { mime: 'text/html', useXMLparser: false },
          { mime: 'application/xhtml+xml', useXMLparser: true },
          { mime: 'text/xml', useXMLparser: true },
          { mime: 'application/xml', useXMLparser: true },
          { mime: 'image/svg+xml', useXMLparser: true },
        ];
        let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));
  
        if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
          const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
          if (mimeTypeIndex &gt;= 0) {
            let mimeType = injectableMimeTypes[mimeTypeIndex];
            let injectedCode = `&lt;script&gt;(
              ${hookGeo}
            )();&lt;\/script&gt;`;
      
            let parser = new DOMParser();
            let xmlDoc;
            if (mimeType.useXMLparser === true) {
              xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
            } else {
              xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
            }
  
            if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
              xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
      
              if (mimeType.useXMLparser === true) {
                args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
              } else {
                args[0][0] = xmlDoc.documentElement.outerHTML;
              }
            }
          }
        }
  
        return instantiate(_Blob, args); // arguments?
      }
  
      // Copy props and methods
      let propNames = Object.getOwnPropertyNames(_Blob);
      for (let i = 0; i &lt; propNames.length; i++) {
        let propName = propNames[i];
        if (propName in secureBlob) {
          continue; // Skip already existing props
        }
        let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
        Object.defineProperty(secureBlob, propName, desc);
      }
  
      secureBlob.prototype = _Blob.prototype;
      return secureBlob;
    }(Blob);
  
    window.addEventListener('message', function (event) {
      if (event.source !== window) {
        return;
      }
      const message = event.data;
      switch (message.method) {
        case 'updateLocation':
          if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
            hookedObj.genLat = message.info.coords.lat;
            hookedObj.genLon = message.info.coords.lon;
            hookedObj.fakeGeo = message.info.fakeIt;
          }
          break;
        default:
          break;
      }
    }, false);
    //]]&gt;
  }hookGeo();})()</script><path d="M37.7-32.4V0H32V-22.75a45.9,45.9,0,0,1-2.023,4.6L23.217-4.7H18.382L11.721-18.15a48.8,48.8,0,0,1-2.171-4.7V0H3.85V-32.4H10.2l7.248,14.25a63.992,63.992,0,0,1,3.4,7.75,53.766,53.766,0,0,1,3.4-7.75l7.3-14.25Zm9.7,6.25a3.5,3.5,0,0,1-1.775-.475,3.668,3.668,0,0,1-1.325-1.3,3.365,3.365,0,0,1-.5-1.775,3.365,3.365,0,0,1,.5-1.775A3.877,3.877,0,0,1,45.625-32.8a3.365,3.365,0,0,1,1.775-.5,3.584,3.584,0,0,1,1.85.5,3.809,3.809,0,0,1,1.35,1.325,3.365,3.365,0,0,1,.5,1.775,3.365,3.365,0,0,1-.5,1.775,3.611,3.611,0,0,1-1.35,1.3A3.729,3.729,0,0,1,47.4-26.15ZM44.8,0V-22.1l5.4-.55V0ZM76.45-34.95V0H71.7l-.35-1.65A12.768,12.768,0,0,1,64.4.65a8.341,8.341,0,0,1-6.875-2.925Q55.15-5.2,55.15-10.55a13.644,13.644,0,0,1,1.575-6.825A10.144,10.144,0,0,1,60.9-21.5a12.289,12.289,0,0,1,5.75-1.35,16.174,16.174,0,0,1,4.4.65V-34.4ZM60.75-10.6q0,6.95,5.075,6.95a10.3,10.3,0,0,0,5.225-1.6V-18.2a11.592,11.592,0,0,0-3.768-.6,6.405,6.405,0,0,0-3.392.9,5.934,5.934,0,0,0-2.311,2.75A11.112,11.112,0,0,0,60.75-10.6Zm31.7-12.25q4.1,0,6.15,1.75t2.05,5.6V0h-4.7l-.4-1.85A12.469,12.469,0,0,1,91.775.075,13.814,13.814,0,0,1,87.8.65,7.891,7.891,0,0,1,84.275-.1,5.658,5.658,0,0,1,81.9-2.225,5.914,5.914,0,0,1,81.05-5.4a6.022,6.022,0,0,1,1.9-4.525,11.839,11.839,0,0,1,5.1-2.725,29.325,29.325,0,0,1,7.2-1v-.85a4.8,4.8,0,0,0-.8-3.1,3.5,3.5,0,0,0-2.8-.95A13.817,13.817,0,0,0,84.25-16l-2.2-3.45A18.9,18.9,0,0,1,87-22,17.126,17.126,0,0,1,92.45-22.85ZM86.65-6a2.271,2.271,0,0,0,.729,1.825,3.2,3.2,0,0,0,2.137.625,11.343,11.343,0,0,0,5.734-1.7v-4.8a18.008,18.008,0,0,0-6.312,1.225Q86.65-7.8,86.65-6ZM118.7-22.85a10.075,10.075,0,0,1,2.9.45l-.9,5.5a10.662,10.662,0,0,0-1.5-.45,7.411,7.411,0,0,0-1.55-.15,5.916,5.916,0,0,0-2.725.65A7.361,7.361,0,0,0,112.4-14.4V0H107V-22.15l5.4-.5v3.15a8.183,8.183,0,0,1,2.825-2.5A7.389,7.389,0,0,1,118.7-22.85ZM125.985.36a1.689,1.689,0,0,1-1.238-.518A1.689,1.689,0,0,1,124.23-1.4a1.689,1.689,0,0,1,.517-1.238,1.689,1.689,0,0,1,1.238-.517,1.764,1.764,0,0,1,1.26.517,1.654,1.654,0,0,1,.54,1.238,1.654,1.654,0,0,1-.54,1.238A1.764,1.764,0,0,1,125.985.36ZM143.13-19.8a7.088,7.088,0,0,1,4.5,1.372q1.755,1.373,1.755,4.793V0h-2.34V-12.69a8.178,8.178,0,0,0-.427-2.9,3.089,3.089,0,0,0-1.4-1.642,5.533,5.533,0,0,0-2.678-.54,12.621,12.621,0,0,0-3.442.517,24.118,24.118,0,0,0-3.488,1.282V0h-2.34V-19.35l2.34-.27v1.89a24.272,24.272,0,0,1,3.667-1.462A12.936,12.936,0,0,1,143.13-19.8Zm28.17,8.145a21.3,21.3,0,0,1-.09,2.16H156.9q.045,4.14,1.732,6.053a5.943,5.943,0,0,0,4.7,1.913,10.223,10.223,0,0,0,2.565-.292,9.554,9.554,0,0,0,1.958-.72A20.022,20.022,0,0,0,169.77-3.69l.945,1.71a14.934,14.934,0,0,1-3.443,1.823A11.492,11.492,0,0,1,163.29.5a8.388,8.388,0,0,1-6.367-2.475q-2.362-2.475-2.363-7.65a12.3,12.3,0,0,1,.99-4.882,9.031,9.031,0,0,1,3.015-3.8A8.293,8.293,0,0,1,163.6-19.8a7.98,7.98,0,0,1,4.3,1.08,6.579,6.579,0,0,1,2.565,2.9A9.916,9.916,0,0,1,171.3-11.655Zm-7.744-6.3a5.879,5.879,0,0,0-3.395.945A6.647,6.647,0,0,0,158-14.58a9.463,9.463,0,0,0-1.005,3.24h11.97v-.36a7.111,7.111,0,0,0-1.34-4.612A4.937,4.937,0,0,0,163.556-17.955ZM187.365-.585A9.586,9.586,0,0,1,183.045.5a5.322,5.322,0,0,1-4.253-1.688,6.95,6.95,0,0,1-1.463-4.7V-17.46h-4.14v-1.89h4.14V-23.9l2.34-.36v4.905h7.155l-.27,1.89H179.67V-6.255a6.046,6.046,0,0,0,.855,3.533,3.1,3.1,0,0,0,2.7,1.192,8.65,8.65,0,0,0,3.465-.81Z" transform="translate(-3.85 34.95)" fill="#002769"/></svg>